{
  "fileTypes": [ "fif" ],
  "name": "Fift",
  "patterns": [
    {
      "include": "#fift"
    }    
  ],
  "repository": {
    "fift": {
      "patterns": [
        {
          "comment": "tilde",
          "match": "(?<=^|\\s)(?:(~.+))(?=\\s)",
          "name": "support.module.fift"
        },
        {
          "match": "(?<=^|\\s)(?:(recv_internal|recv_external))(?=\\s)",
          "name": "support.module.fift"
        },
        {
          "match": "(?<=^|\\s)(?:(GR\\$[0-h./]+))(?=\\s)",
          "name": "support.module.fift"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#string"
        },
        {
          "include": "#word"
        },
        {
          "include": "#storage"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.shebang.fift",
          "match": "\\A(#!).*(?=$)"
        },
        {
          "match": "(\/\/.*$)",
          "name": "comment.line.double-slash.fift"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "match": "(?:(?<=^|\\s)(true|false)(?=\\s))",
          "name": "constant.language.boolean.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(bl)(?=\\s))",
          "name": "constant.language.fift"
        },
        {
          "match": "(?<=^|\\s)([-+]?(0x|0b)?[-+]?[0-f]+(\\.[0-9]*e(-?[0-9]+)|\\.?[0-9a-fA-F]*))(?=\\s)",
          "name": "constant.numeric.fift"
        },
        {
          "match": "(?<=^|\\s)(b{[01]*})(?=\\s)",
          "name": "constant.numeric.fift"
        },
        {
          "match": "(?<=^|\\s)(x{[0-f]*})(?=\\s)",
          "name": "constant.numeric.fift"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "comment": "",
          "match": "(?:[\\.\\+]?\")[^\"]+\"",
          "name": "string.quoted.double.fift"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "match": "(?:(?<=^|\\s)([cts]\\d+)(?=\\s))",
          "name": "support.type.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(si?\\((-\\d)?\\))(?=\\s))",
          "name": "support.type.fift"
        }
      ]
    },
    "word": {
      "patterns": [
        {
          "match": "(?:(?<=^|\\s)(-ROLL|-ROT|}>|}>AGAIN|}>ATEXIT|}>ATEXITALT|}>CATCH<{|}>CONT|}>DO:|}>DO<{|}>ELSE:|}>ELSE<{|}>IF|}>IFJMP|}>IFNOT|}>IFNOTJMP|}>REPEAT|}>SETEXITALT|}>UNTIL|}END|}END>|}END>c|}END>s|2DROP|2DUP|2OVER|2SWAP|ABS|ACCEPT|ADD|ADDCONST|ADDINT|AGAIN|AGAIN:|AGAIN:<{|AGAINEND|AND|ATEXIT|ATEXIT:<{|ATEXITALT|ATEXITALT:<{|BBITREFS|BBITS|BCHKBITREFS|BCHKBITREFSQ|BCHKBITS|BCHKBITS#|BCHKBITSQ|BCHKBITSQ#|BCHKREFS|BCHKREFSQ|BCONCAT|BCONCATQ|BINDUMP|BINPRINT|BITSIZE|BLESS|BLESSARGS|BLESSNUMARGS|BLESSVARARGS|BLKDROP|BLKPUSH|BLKSWAP|BLKSWX|BOOLAND|BOOLEVAL|BOOLOR|BRANCH|BREFS|BREMBITREFS|BREMBITS|BREMREFS|CALL|CALLCC|CALLCCARGS|CALLCCVARARGS|CALLREF|CALLX|CALLXARGS|CALLXVARARGS|CHKBIT|CHKBOOL|CHKDEPTH|CHKNAN|CHKSIGNU|CMP|COMPOS|COMPOSALT|COMPOSBOTH|CONDSEL|CONDSELCHK|CONT|CONT:<{|CTOS|DEBUG|DEBUGOFF|DEBUGON|DEBUGSTR|DEBUGSTRI|DEC|DEPTH|DICTADD|DICTADDB|DICTADDGET|DICTADDGETB|DICTADDGETREF|DICTADDREF|DICTDEL|DICTDELGET|DICTDELGETREF|DICTEMPTY|DICTGET|DICTGETNEXT|DICTGETNEXTEQ|DICTGETPREV|DICTGETPREVEQ|DICTGETREF|DICTIADD|DICTIADDB|DICTIADDGET|DICTIADDGETB|DICTIADDGETREF|DICTIADDREF|DICTIDEL|DICTIDELGET|DICTIDELGETREF|DICTIGET|DICTIGETEXEC|DICTIGETJMP|DICTIGETNEXT|DICTIGETNEXTEQ|DICTIGETPREV|DICTIGETPREVEQ|DICTIGETREF|DICTIMAX|DICTIMAXREF|DICTIMIN|DICTIMINREF|DICTIREMMAX|DICTIREMMAXREF|DICTIREMMIN|DICTIREMMINREF|DICTIREPLACE|DICTIREPLACEB|DICTIREPLACEGET|DICTIREPLACEGETB|DICTIREPLACEGETREF|DICTIREPLACEREF|DICTISET|DICTISETB|DICTISETGET|DICTISETGETB|DICTISETGETREF|DICTISETREF|DICTMAX|DICTMAXREF|DICTMIN|DICTMINREF|DICTPUSHCONST|DICTREMMAX|DICTREMMAXREF|DICTREMMIN|DICTREMMINREF|DICTREPLACE|DICTREPLACEB|DICTREPLACEGET|DICTREPLACEGETB|DICTREPLACEGETREF|DICTREPLACEREF|DICTSET|DICTSETB|DICTSETGET|DICTSETGETB|DICTSETGETREF|DICTSETREF|DICTUADD|DICTUADDB|DICTUADDGET|DICTUADDGETB|DICTUADDGETREF|DICTUADDREF|DICTUDEL|DICTUDELGET|DICTUDELGETREF|DICTUGET|DICTUGETEXEC|DICTUGETJMP|DICTUGETNEXT|DICTUGETNEXTEQ|DICTUGETPREV|DICTUGETPREVEQ|DICTUGETREF|DICTUMAX|DICTUMAXREF|DICTUMIN|DICTUMINREF|DICTUREMMAX|DICTUREMMAXREF|DICTUREMMIN|DICTUREMMINREF|DICTUREPLACE|DICTUREPLACEB|DICTUREPLACEGET|DICTUREPLACEGETB|DICTUREPLACEGETREF|DICTUREPLACEREF|DICTUSET|DICTUSETB|DICTUSETGET|DICTUSETGETB|DICTUSETGETREF|DICTUSETREF|DIV|DIVC|DIVMOD|DIVMODC|DIVMODR|DIVR|DROP|DROP2|DROPX|DUMP|DUMPSTK|DUMPSTKTOP|DUMPTOSFMT|DUP|DUP2|ENDC|ENDCST|ENDS|EQINT|EQUAL|EXECUTE|FALSE|FITS|FITSX|GEQ|GEQINT|GREATER|GTINT|HASHCU|HASHSU|HEXDUMP|HEXPRINT|IF|IF:<{|IFBITJMP|IFBITJMPREF|IFELSE|IFJMP|IFJMP:<{|IFJMPREF|IFNBITJMP|IFNBITJMPREF|IFNOT|IFNOT:<{|IFNOTJMP|IFNOTJMP:<{|IFNOTJMPREF|IFNOTREF|IFNOTRET|IFNOTRETALT|IFREF|IFRET|IFRETALT|INC|INT|INTSORT2|INVERT|ISNAN|ISNEG|ISNNEG|ISNPOS|ISNZERO|ISPOS|ISZERO|JMPREF|JMPREFDATA|JMPX|JMPXARGS|JMPXDATA|JMPXVARARGS|LDDICT|LDDICTQ|LDI|LDI_l|LDILE4|LDILE4Q|LDILE8|LDILE8Q|LDIQ|LDIX|LDIXQ|LDONES|LDOPTREF|LDREF|LDREFRTOS|LDSAME|LDSLICE|LDSLICE_l|LDSLICEQ|LDSLICEX|LDSLICEXQ|LDU|LDU_l|LDULE4|LDULE4Q|LDULE8|LDULE8Q|LDUQ|LDUX|LDUXQ|LDZEROES|LEQ|LEQINT|LESS|LESSINT|LOGFLUSH|LOGSTR|LSHIFT|LSHIFT#|LSHIFT#DIV|LSHIFT#DIVR|LSHIFTDIV|LSHIFTDIVR|MAX|MIN|MINMAX|MOD|MODPOW2#|MUL|MULCONST|MULDIV|MULDIVMOD|MULDIVR|MULINT|MULRSHIFT|MULRSHIFT#|MULRSHIFTR|MULRSHIFTR#|NEGATE|NEQ|NEQINT|NEWC|NEWDICT|NEWPROC|NIP|NOP|NOT|ONE|ONLYTOPX|ONLYX|OR|OVER|OVER2|PFXDICTADD|PFXDICTCONSTGETJMP|PFXDICTDEL|PFXDICTGET|PFXDICTGETEXEC|PFXDICTGETJMP|PFXDICTGETQ|PFXDICTREPLACE|PFXDICTSET|PFXDICTSWITCH|PICK|PLDDICT|PLDDICTQ|PLDI|PLDILE4|PLDILE4Q|PLDILE8|PLDILE8Q|PLDIQ|PLDIX|PLDIXQ|PLDOPTREF|PLDSLICE|PLDSLICEQ|PLDSLICEX|PLDSLICEXQ|PLDU|PLDULE4|PLDULE4Q|PLDULE8|PLDULE8Q|PLDUQ|PLDUX|PLDUXQ|PLDUZ|POP|POPCTR|POPCTRSAVE|POPCTRX|POPROOT|POPSAVE|POW2|PREPARE|PRINT|PRINTSTR|PROC|PROC:<{|PROGRAM{|PU2XC|PUSH|PUSH3|PUSHCONT|PUSHCTR|PUSHCTRX|PUSHINT|PUSHNAN|PUSHNEGPOW2|PUSHPOW2|PUSHPOW2DEC|PUSHREF|PUSHREFCONT|PUSHREFSLICE|PUSHROOT|PUSHSLICE|PUSHX|PUXC|PUXC2|PUXCPU|QADD|QAND|QDEC|QDIV|QDIVC|QDIVMOD|QDIVMODC|QDIVMODR|QDIVR|QFITS|QFITSX|QINC|QLSHIFT|QMOD|QMUL|QMULDIVMOD|QMULDIVR|QNEGATE|QNOT|QOR|QPOW2|QRSHIFT|QSUB|QSUBR|QUFITS|QUFITSX|QUIET|QXOR|RAWRESERVE|RAWRESERVEX|REPEAT|REPEAT:|REPEAT:<{|REPEATEND|RET|RETALT|RETARGS|RETBOOL|RETDATA|RETFALSE|RETTRUE|RETURNARGS|RETURNVARARGS|RETVARARGS|REVERSE|REVX|ROLL|ROLLREV|ROT|ROTREV|RSHIFT|RSHIFT#|RSHIFTR|RSHIFTR#|SAVE|SAVEALT|SAVEALTCTR|SAVEBOTH|SAVEBOTHCTR|SAVECTR|SBITREFS|SBITS|SCHKBITREFS|SCHKBITREFSQ|SCHKBITS|SCHKBITSQ|SCHKREFS|SCHKREFSQ|SCUTFIRST|SCUTLAST|SDBEGINS|SDBEGINS:imm|SDBEGINSQ|SDBEGINSQ:imm|SDBEGINSX|SDBEGINSXQ|SDCNTLEAD0|SDCNTLEAD1|SDCNTTRAIL0|SDCNTTRAIL1|SDCUTFIRST|SDCUTLAST|SDEMPTY|SDEQ|SDFIRST|SDLEXCMP|SDPFX|SDPFXREV|SDPPFX|SDPPFXREV|SDPSFX|SDPSFXREV|SDSFX|SDSFXREV|SDSKIPFIRST|SDSKIPLAST|SDSUBSTR|SEMPTY|SENDRAWMSG|SETALTCTR|SETCONT|SETCONTARGS|SETCONTCTR|SETCONTCTRX|SETCONTVARARGS|SETCP|SETCP0|SETCPX|SETEXITALT|SETEXITALT:<{|SETGASLIMIT|SETNUMARGS|SETNUMVARARGS|SETRETCTR|SGN|SKIPDICT|SKIPOPTREF|SLICE|SPLIT|SPLITQ|SREFS|SREMPTY|SSKIPFIRST|SSKIPLAST|STB|STBQ|STBR|STBREF|STBREFQ|STBREFR|STBREFR_l|STBREFRQ|STBRQ|STDICT|STI|STI_l|STILE4|STILE8|STIQ|STIR|STIRQ|STIX|STIXQ|STIXR|STIXRQ|STONES|STRDUMP|STREF|STREF_l|STREF2CONST|STREFCONST|STREFQ|STREFR|STREFRQ|STRPRINT|STSAME|STSLICE|STSLICE_l|STSLICECONST|STSLICEQ|STSLICER|STSLICERQ|STU|STU_l|STULE4|STULE8|STUQ|STUR|STURQ|STUX|STUXQ|STUXR|STUXRQ|STZEROES|SUB|SUBCONST|SUBINT|SUBR|SUBSLICE|SWAP|SWAP2|TEN|THENRET|THENRETALT|THROW|THROWANY|THROWANYIF|THROWANYIFNOT|THROWARG|THROWARGANY|THROWARGANYIF|THROWARGANYIFNOT|THROWARGIF|THROWARGIFNOT|THROWIF|THROWIFNOT|TRUE|TRY|TRY:<{|TUCK|TWO|UBITSIZE|UFITS|UFITSX|UNTIL|UNTIL:|UNTIL:<{|UNTILEND|WHILE|WHILE:<{|WHILEEND|XC2PU|XCHG|XCHG0|XCHG3|XCHG3_l|XCHGX|XCPU|XCPU2|XCPUXC|XOR|ZERO)(?=\\s))",
          "name": "entity.name.tag"
        },
        {
          "match": "(?:(?<=^|\\s)(<{|}>[cs])(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(\\.|\\._|x\\.|x\\._|b\\.|b\\._|csr\\.|\\.s|\\.tc|\\(\\.\\)|\\(x\\.\\)|\\(b\\.\\))(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(\\+|-|negate|1\\+|1-|2\\+|2-|\\*|/|/c|/r|mod|/mod|/cmod|/rmod|\\*/|\\*/c|\\*/r|\\*/mod|\\*/cmod|\\*/rmod|\\*mod|1<<|-1<<|1<<1-|%1<<|<<|>>|>>c|>>r|2\\*|2/|\\*>>|\\*>>c|\\*>>r|<</|<</c|<</r|not|and|or|xor)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(nop|constant)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(cmp|=|<>|<=|>=|<|>|sgn|0=|0<>|0<=|0>=|0<|0>|fits|ufits)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(char|emit|space|cr|type|chr|hold|\\(number\\)|\\$\\+|\\$=|\\$cmp|\\$reverse|\\(-trailing\\)|-trailing|-trailing0|\\$len|Blen|Bx\\.|B\\||B\\+|B=|Bcmp|u>B|i>B|Lu>B|Li>B|B>u@|B>i@|B>u@\\+|B>i@\\+|B>Lu@|B>Li@|B>Lu@\\+|B>Li@\\+|Bhash)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(<b|i,|u,|ref,|\\$,|B,|s,|sr,|b>|\\$>s|\\|\\+|\\|_|b\\+|bbits|brefs|bbitrefs|brembits|bremrefs|brembitrefs|hash)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(<s|i\\@|u\\@|i\\@\\+|u\\@\\+|i\\@\\?|u\\@\\?|i\\@\\?\\+|u\\@\\?\\+|\\$\\@|B\\@|\\$\\@\\+|B\\@\\+|\\$\\@\\?|B\\@\\?|\\$\\@\\?\\+|B\\@\\?\\+|ref\\@|ref\\@\\+|ref\\@\\?|ref\\@\\?\\+|s>|empty\\?|remaining|sbits|srefs|sbitrefs)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(drop|2drop|\\??dup|over|2dup|2over|swap|2swap|tuck|nip|rot|-rot|pick|roll|-roll|reverse|exch|exch2|depth)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(now|newkeypair|priv>pub|ed25519_sign|ed25519_chksign|ed25519_sign_uint)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(execute|times|if|ifnot|cond|while|until)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(B{|x{|b{)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(\\[|\\]|{|}|\\({\\)|\\(}\\)|\\(compile\\)|\\(execute\\)|'|'nop)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(word|skipspc|include|abort|quit|bye|halt)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(B>boc|boc>B|boc\\+>B|file>B|filepart>B|B>file)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(dictnew|udict!//+|udict!|b>udict!//+|b>udict!|udict@|idict!//+|idict!|b>idict!//+|b>idict!|idict@|pfxdict!//+|pfxdict!|pfxdict@|dictmap|dictmerge)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(runvmcode|gasrunvmcode|runvmdict|gasrunvmdict|runvm|gasrunvm|dbrunvm|dbrunvm-parallel)(?=\\s))",
          "name": "support.function.fift"
        },
        {
          "match": "(?:(?<=^|\\s)(smca>\\$|\\$>smca)(?=\\s))",
          "name": "support.function.fift"
        }
      ]
    }
  },
  "scopeName": "source.fift"
}